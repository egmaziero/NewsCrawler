.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::NCleaner 3"
.TH Text::NCleaner 3 "2008-03-23" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::NCleaner \- A simple n\-gram approach to boilerplate removal
.SH "VERSION"
.IX Header "VERSION"
Version 1.0
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The \fBncleaner\fR is a simple approach to boilerplate removal from Web pages
using character-level n\-gram models trained on manually cleaned data.  This
module provides a programmer \s-1API\s0, while end-users will find it easier to 
work with the command-line front-ends \fBncleaner\fR and \fBtrain-ncleaner\fR.
.PP
.Vb 1
\&    use Text::NCleaner;
.Ve
.PP
\&\fB\s-1TODO:\s0 add short usage example here\fR
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "\fI\fI$untrained_cleaner\fI\fR = \fBnew\fR Text::NCleaner;" 4
.el .IP "\fI\f(CI$untrained_cleaner\fI\fR = \fBnew\fR Text::NCleaner;" 4
.IX Item "$untrained_cleaner = new Text::NCleaner;"
Initialise \fBncleaner\fR model for training on manually annotated data.  Returns
object of class \fBText::NCleaner\fR.
.ie n .IP "\fI\fI$cleaner\fI\fR = \fBnew\fR Text::NCleaner \fI\fI$filename\fI\fR;" 4
.el .IP "\fI\f(CI$cleaner\fI\fR = \fBnew\fR Text::NCleaner \fI\f(CI$filename\fI\fR;" 4
.IX Item "$cleaner = new Text::NCleaner $filename;"
Load \fBncleaner\fR model from file \fI\f(CI$filename\fI\fR (which must be a
\&\fBText::NCleaner\fR object serialised with the \fBsave\fR method),
returning an object of class \fBText::NCleaner\fR.
.ie n .IP "\fI\fI$model\fI\fR\->\fBtrain\fR(\fI\fI$clean_text\fI\fR, \fI\fI$dirty_text\fI\fR, \fI\fI$n\fI\fR [, \fI\fI$mode\fI\fR, \fI\fI$q\fI\fR]);" 4
.el .IP "\fI\f(CI$model\fI\fR\->\fBtrain\fR(\fI\f(CI$clean_text\fI\fR, \fI\f(CI$dirty_text\fI\fR, \fI\f(CI$n\fI\fR [, \fI\f(CI$mode\fI\fR, \fI\f(CI$q\fI\fR]);" 4
.IX Item "$model->train($clean_text, $dirty_text, $n [, $mode, $q]);"
.PD 0
.ie n .IP "\fI\fI$model\fI\fR\->\fBdiff_train\fR(\fI\fI$clean_text\fI\fR, \fI\fI$raw_text\fI\fR, \fI\fI$n\fI\fR [, \fI\fI$mode\fI\fR, \fI\fI$q\fI\fR]);" 4
.el .IP "\fI\f(CI$model\fI\fR\->\fBdiff_train\fR(\fI\f(CI$clean_text\fI\fR, \fI\f(CI$raw_text\fI\fR, \fI\f(CI$n\fI\fR [, \fI\f(CI$mode\fI\fR, \fI\f(CI$q\fI\fR]);" 4
.IX Item "$model->diff_train($clean_text, $raw_text, $n [, $mode, $q]);"
.PD
Train \fBncleaner\fR model either on separate samples of clean and dirty text
(\fBtrain\fR), or on raw and cleaned versions of the same text (\fBdiff_train\fR,
for \*(L"differential training\*(R").
.Sp
The remaining parameters specify the order \fI\f(CI$n\fI\fR of the n\-gram models, the
normalisation mode \fI\f(CI$mode\fI\fR and the interpolation factor \fI\f(CI$q\fI\fR.  The latter two
are optional and assume default values if they are not specified.
.Sp
The interpolation factor \fI\f(CI$q\fI\fR can be changed after training and is described
under \fBset_q\fR below.  For \fI\f(CI$mode\fI\fR, the following values can be selected with
increasingly heavy normalisation. The default mode is 1.
.Sp
.Vb 4
\&    0 = minimal normalisation (only whitespace and control characters)
\&    1 = map all high\-bit characters (outside ASCII range) to "~"
\&    2 = map ASCII letters to "a" for vowels and "t" for consonants, digits to "0"
\&    3 = non\-lexical model, maps all ASCII letters to "a" and all digits to "0"
.Ve
.ie n .IP "\fI\fI$cleaner\fI\fR\->\fBdebug\fR(\fI\fI$level\fI\fR);" 4
.el .IP "\fI\f(CI$cleaner\fI\fR\->\fBdebug\fR(\fI\f(CI$level\fI\fR);" 4
.IX Item "$cleaner->debug($level);"
Enable / disable debugging messages.  Debugging level 1 performs additional
consistency checks and prints some diagnostic messages.  Debugging level 2
prints detailed information.
.ie n .IP "\fI\fI$cleaner\fI\fR\->\fBset_q\fR(\fI\fI$q\fI\fR);" 4
.el .IP "\fI\f(CI$cleaner\fI\fR\->\fBset_q\fR(\fI\f(CI$q\fI\fR);" 4
.IX Item "$cleaner->set_q($q);"
Set interpolation factor \fI\f(CI$q\fI\fR of the n\-gram models, which must be in the range
\&\fI(0,1)\fR.  Values close to 1 correspond to strong smoothing (all history sizes
have equal weight) while values very close to 0 disable smoothing.
.ie n .IP "\fI\fI$cleaner\fI\fR\->\fBset_n\fR(\fI\fI$n\fI\fR);" 4
.el .IP "\fI\f(CI$cleaner\fI\fR\->\fBset_n\fR(\fI\f(CI$n\fI\fR);" 4
.IX Item "$cleaner->set_n($n);"
Set order of n\-gram model to use, corresponding to a history size of \fI\f(CI$n\fI\fR\-1 characters.
\&\fI\f(CI$n\fI\fR may not be larger than the order used in training.
.ie n .IP "\fI\fI$cleaner\fI\fR\->\fBset_bias\fR(\fI\fI$b\fI\fR);" 4
.el .IP "\fI\f(CI$cleaner\fI\fR\->\fBset_bias\fR(\fI\f(CI$b\fI\fR);" 4
.IX Item "$cleaner->set_bias($b);"
Apply bias of \fI\f(CI$b\fI\fR bits to n\-gram model for clean text. A positive value
increases precision by sacrificing recall, whereas a negative value increases
recall with lower precision.  Absolute values larger than 1 bit are rarely
useful.
.ie n .IP "\fI\fI$cleaner\fI\fR\->\fBsave\fR(\fI\fI$filename\fI\fR);" 4
.el .IP "\fI\f(CI$cleaner\fI\fR\->\fBsave\fR(\fI\f(CI$filename\fI\fR);" 4
.IX Item "$cleaner->save($filename);"
Save trained \fBncleaner\fR model to portable disk file. The serialised file is
Perl code (generated by \fBData::Dumper\fR) which is later simply executed to
recreate the \fBText::NCleaner\fR object.  This approach allows the standard
parameter files to be included in the distribution as Perl modules.
.ie n .IP "if (\fI\fI$cleaner\fI\fR\->\fBcheck\fR(\fI\fI$text\fI\fR)) { ... }" 4
.el .IP "if (\fI\f(CI$cleaner\fI\fR\->\fBcheck\fR(\fI\f(CI$text\fI\fR)) { ... }" 4
.IX Item "if ($cleaner->check($text)) { ... }"
.PD 0
.ie n .IP "(\fI\fI$is_clean\fI\fR, \fI\fI$diff_bits\fI\fR) = \fI\fI$cleaner\fI\fR\->\fBcheck\fR(\fI\fI$text\fI\fR);" 4
.el .IP "(\fI\f(CI$is_clean\fI\fR, \fI\f(CI$diff_bits\fI\fR) = \fI\f(CI$cleaner\fI\fR\->\fBcheck\fR(\fI\f(CI$text\fI\fR);" 4
.IX Item "($is_clean, $diff_bits) = $cleaner->check($text);"
.PD
Evaluates paragraph of text against the trained n\-gram models.  In scalar
context, returns \fBTrue\fR if the text is considered clean, \fBFalse\fR otherwise.
In list context, returns both the decision and the difference in cross-entropy
(taking the user-specified bias value into account).  A positive difference
indicates that the text is more likely to be clean.
.ie n .IP "\fI\fI@paragraphs\fI\fR = \fI\fI$cleaner\fI\fR\->\fBprocess\fR(\fI\fI$filename\fI\fR);" 4
.el .IP "\fI\f(CI@paragraphs\fI\fR = \fI\f(CI$cleaner\fI\fR\->\fBprocess\fR(\fI\f(CI$filename\fI\fR);" 4
.IX Item "@paragraphs = $cleaner->process($filename);"
Clean \s-1HTML\s0 or text file \fI\f(CI$filename\fI\fR using trained ncleaner model, returning a
list of clean text segments marked as \f(CW\*(C`<h>\*(C'\fR (header), \f(CW\*(C`<l>\*(C'\fR (list
item) or \f(CW\*(C`<p>\*(C'\fR (normal text paragraph).  See Text::NCleaner::Segmenter
for details on the HTML-to-text conversion, the segmentation procedure, and
the autodetection of \s-1HTML\s0 files (extensions \f(CW\*(C`.html\*(C'\fR, \f(CW\*(C`.xhtml\*(C'\fR and \f(CW\*(C`.htm\*(C'\fR).
.SH "AUTHOR"
.IX Header "AUTHOR"
Stefan Evert, \f(CW\*(C`<stefan.evert@uos.de>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Stefan Evert, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
