use strict;use Cwd;my $dir = getcwd;# more than 500 KB and UTF-8 or ISO-8859-9, which is converted to UFT-8print "Crawling the web... \n\n";system("LANG=pt_BR.utf8");my $indexFileNumber = 10621;while(1){	open(VLINKS,"<visitedLinks.txt") or die "Error 1\n\n\n";	my @visitedLinks = <VLINKS>;	close(VLINKS);	open(TOLINKS,"<toVisitLinks.txt") or die "Error 0\n\n\n";	my @toVisitLinks = <TOLINKS>;	close(TOLINKS);		my @newToVisit;		for(my $i=0; $i<=$#toVisitLinks; $i++)	{		my $link = trim($toVisitLinks[$i]);		print "Intend to visit $link\n";		print "Status of visitation: ".wasVisited($link,@visitedLinks)."\n";		if (wasVisited($link,@visitedLinks) == 0)		{			print "Get $link\n";			my $fileName = "page_".int(rand(1000000)).".txt";						chdir("$dir/tools/jspider-0.5.0-dev/bin/");			#Download			system("./jspider-tool.sh download $link $dir/pagesToClean/$fileName");			#Search Links			system("./jspider-tool.sh findlinks $link > $dir/pages/tempFileWithLinks");			chdir($dir);			#Clean			system("perl tools/Text-NCleaner-1.0/bin/ncleaner -m tools/Text-NCleaner-1.0/bin/modelJan14.model pagesToClean/ cleanedPages/");			#if you want to store all crawled pages			unlink("$dir/pagesToClean/$fileName");						opendir(DIR, "cleanedPages") or die "can't opendir texts: $!\n"; 			my @files = grep { !(/^\./) } readdir(DIR);			closedir(DIR);						foreach(@files)			{				system("perl cleaner2.pl cleanedPages/$_");				wait();				system("rm cleanedPages/$_");				#call guess-language				system ("python guessLanguage.py cleanedPages/".$_."_cleaned > temp/LI_".$_.".txt");				open (LI,"<temp/LI_".$_.".txt") or die "Error opening temp/LI_".$_.".txt $! \n";				my $LI = <LI>;				if (trim($LI) =~ /pt/)				{					print "Text in PT\n";					system("mv cleanedPages/".$_."_cleaned texts/".$indexFileNumber.".txt");					$indexFileNumber++;				}				else				{					unlink("cleanedPages/".$_."_cleaned");					print "Text in $LI\n";				}				unlink("temp/LI_".$_.".txt")			}			#Novos links para visitar			open(FOUNDLINKS,"<pages/tempFileWithLinks") or die "Error 4\n\n\n";			my @tempLinks = <FOUNDLINKS>;			close(FOUNDLINKS);			foreach(@tempLinks)			{				my $new_link = trim($_);				if ((!($new_link =~ /javascript:/)) and (!($new_link =~ /\.css$/)) and (!($new_link =~ /\.js$/))  and (!($new_link =~ /\.png$/)) and (!($new_link =~ /\.jpg$/)) and (!($new_link =~ /\.gif$/)) and (!($new_link =~ /\.pdf$/)) and (!($new_link =~ /\.css$/)) and (!($new_link =~ /\.xml$/)) and (!($new_link =~ /\.ico$/)))				{					if (wasVisited($new_link,@visitedLinks) == 0)					{						push(@newToVisit,$new_link);					}				}			}			#unlink("pages/tempFileWithLinks");						push(@visitedLinks,$link);			print "Mark $link as visited\n";		}	}		#armazena visitado	open(VLINKS,">visitedLinks.txt") or die "Error 2\n\n\n";	foreach(@visitedLinks)	{		my $link = $_;		print VLINKS trim($link)."\n";	}	close(VLINKS);		#armazena novos para visitar	open(TOLINKS,">toVisitLinks.txt") or die "Error 5\n\n\n";	foreach(@newToVisit)	{		my $link = $_;		print TOLINKS trim($link)."\n";	}	close(TOLINKS);	system("rm pages/*");	system("rm cleanedPages/*");	system("rm pagesToClean/*");}sub wasVisited{	my $link = shift;	my @visitedLinks = @_;	my $visited = 0;		foreach(@visitedLinks)	{		my $visited = trim($_);		if ($link eq $visited)		{			$visited = 1;			return $visited;		}	}	return $visited;}sub trim($){ my $string = shift; $string =~ s/^\s+//; $string =~ s/\s+$//; return $string;}